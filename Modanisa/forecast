#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 25 21:29:28 2020

@author: obikmaz
"""
import numpy as np
import pandas as pd
import matplotlib.pylab as plt
import warnings
import itertools
warnings.filterwarnings("ignore")
plt.style.use('fivethirtyeight')
import statsmodels.api as sm
import matplotlib

matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 12
matplotlib.rcParams['ytick.labelsize'] = 12
matplotlib.rcParams['text.color'] = 'k'

df = pd.read_excel("UzumSatisVeriSeti.xlsx")
KASTAMONU = df.loc[df['Şehir'] == 'KASTAMONU']
KASTAMONU['Tarih'].min(), KASTAMONU['Tarih'].max()


cols = ['Ortalama Satış Tutarı (TL)', 'Yeşil Üzüm Miktar (Kg)', 'Kırmızı Üzüm Miktar (Kg)', 'Mor Üzüm Miktar (Kg)', 'Toplam Kasa (Adet)', 'Küçük Boy Kasa (Adet)', 'Büyük Boy Kasa (Adet)', 'XL Kasa (Adet)', 'Üretim Tipi', 'Şehir']
KASTAMONU.drop(cols, axis=1, inplace=True)
KASTAMONU = KASTAMONU.sort_values('Tarih')
KASTAMONU.isnull().sum()

KASTAMONU = KASTAMONU.groupby('Tarih')['Toplam  Miktar (Kg)'].sum().reset_index()

KASTAMONU = KASTAMONU.set_index('Tarih')
KASTAMONU.index

print(KASTAMONU)

y = KASTAMONU['Toplam  Miktar (Kg)'].resample('MS').mean()
y['2017':]


y.plot(figsize=(15, 6))
plt.show()

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
decomposition = sm.tsa.seasonal_decompose(y, model='additive')
fig = decomposition.plot()
plt.show()


p = d = q = range(0, 2)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]
print('Examples of parameter combinations for Seasonal ARIMA...')
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))

for param in pdq:
    for param_seasonal in seasonal_pdq:
        try:
            mod = sm.tsa.statespace.SARIMAX(y, order=param, seasonal_order=param_seasonal, enforce_stationarity=False, enforce_invertibility=False)

            results = mod.fit()
            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))       
        except:
            continue
        
mod = sm.tsa.statespace.SARIMAX(y, order=(1, 1, 1), seasonal_order=(1, 1, 0, 12), enforce_stationarity=False, enforce_invertibility=False)
results = mod.fit()
print(results.summary().tables[1])
            
results.plot_diagnostics(figsize=(16, 8))
plt.show()

pred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)
pred_ci = pred.conf_int()
ax = y['2014':].plot(label='observed')
pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)
ax.set_xlabel('Date')
ax.set_ylabel('KASTAMONU Toplam Miktar (Kg)')
plt.legend()
plt.show()

y_forecasted = pred.predicted_mean
y_truth = y['2017-01-01':]

mse = ((y_forecasted - y_truth) ** 2).mean()
print('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))

print('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))

pred_uc = results.get_forecast(steps=20)
pred_ci = pred_uc.conf_int()
ax = y.plot(label='observed', figsize=(14, 7))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Tarih')
ax.set_ylabel('KASTAMONU')
plt.legend()
plt.show()



#Kastamonu vs Edirne
KASTAMONU = df.loc[df['Şehir'] == 'KASTAMONU']
EDIRNE = df.loc[df['Şehir'] == 'EDİRNE']
KASTAMONU.shape, EDIRNE.shape


#comparing two categories
cols = ['Ortalama Satış Tutarı (TL)', 'Yeşil Üzüm Miktar (Kg)', 'Kırmızı Üzüm Miktar (Kg)', 'Mor Üzüm Miktar (Kg)', 'Toplam Kasa (Adet)', 'Küçük Boy Kasa (Adet)', 'Büyük Boy Kasa (Adet)', 'XL Kasa (Adet)', 'Üretim Tipi', 'Şehir']
KASTAMONU.drop(cols, axis=1, inplace=True)
EDIRNE.drop(cols, axis=1, inplace=True)

KASTAMONU = KASTAMONU.sort_values('Tarih')
EDIRNE = EDIRNE.sort_values('Tarih')

KASTAMONU = KASTAMONU.groupby('Tarih')['Toplam  Miktar (Kg)'].sum().reset_index()
EDIRNE = EDIRNE.groupby('Tarih')['Toplam Miktar (Kg)'].sum().reset_index()
KASTAMONU = KASTAMONU.set_index('Tarih')

EDIRNE = EDIRNE.set_index('Tarih')
y_KASTAMONU = KASTAMONU['Toplam Miktar (Kg)'].resample('MS').mean()
y_EDIRNE = EDIRNE['Toplam Miktar (Kg)'].resample('MS').mean()

KASTAMONU = pd.DataFrame({'Tarih':y_KASTAMONU.index, 'Toplam Miktar (Kg)':y_KASTAMONU.values})
EDIRNE = pd.DataFrame({'Tarih': y_EDIRNE.index, 'Toplam Miktar (Kg)': y_EDIRNE.values})

store = KASTAMONU.merge(EDIRNE, how='inner', on='Tarih')
store.rename(columns={'Toplam Miktar (Kg)_x': 'KASTAMONU_Toplam Miktar (Kg)', 'Toplam Miktar (Kg)_y': 'EDIRNE_Toplam Miktar (Kg)'}, inplace=True)
store.head()

#plot
plt.figure(figsize=(20, 8))
plt.plot(store['Tarih'], store['kastamonu_toplammiktar'], 'b-', label = 'kastamonu')
plt.plot(store['Tarih'], store['kastamonu_toplammiktar'], 'r-', label = 'EDIRNE supplies')
plt.xlabel('Date'); plt.ylabel('Toplam Miktar (Kg)'); plt.title('KASTAMONU ve EDİRNE miktar')
plt.legend();
